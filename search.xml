<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[git首次上传代码和更新代码的方法]]></title>
    <url>%2Fblog%2F2017%2F12%2F09%2Fgit%E9%A6%96%E6%AC%A1%E4%B8%8A%E4%BC%A0%E4%BB%A3%E7%A0%81%E5%92%8C%E6%9B%B4%E6%96%B0%E4%BB%A3%E7%A0%81%E7%9A%84%E6%96%B9%E6%B3%95%2F</url>
    <content type="text"><![CDATA[首次使用git上传项目到github在github新建仓库（new repository）安装git（这里省略）首次上传项目安装好git后，右键项目文件夹会先出现git bash here的选项： 点击后出现： 然后分别输入 12345git init//git 初始化git add . // 添加所有文件，注意还有一个点git commit -m &quot;your notes(注释)&quot;git remote add origin yourUrl(仓库链接)git push origin master 如果是第一次使用按要求输入账号信息即可，输入完等待一段时间即可 更新已有仓库的代码同样右键想更新的项目文件夹： 123git add .git commit -m &quot;注释&quot;git push origin master 若要输入账号信息输入后等待一段时间即可。]]></content>
      <categories>
        <category>use git</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[基于hexo和github搭建个人博客（二个性化）]]></title>
    <url>%2Fblog%2F2017%2F12%2F01%2F%E5%9F%BA%E4%BA%8Ehexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%BA%8C%E4%B8%AA%E6%80%A7%E5%8C%96%EF%BC%89%2F</url>
    <content type="text"><![CDATA[添加tags、categories、about的页面在blog/themes/next/_config_yml文件下修改：把要添加的模块前面的井号#去掉。123456789menu: home: / || home #about: /about/ || user #tags: /tags/ || tags #categories: /categories/ || th archives: /archives/ || archive #schedule: /schedule/ || calendar #sitemap: /sitemap.xml || sitemap #commonweal: /404/ || heartbeat 修改后：123456789menu: home: / || home about: /about/ || user tags: /tags/ || tags categories: /categories/ || th archives: /archives/ || archive #schedule: /schedule/ || calendar #sitemap: /sitemap.xml || sitemap #commonweal: /404/ || heartbeat 在终端输入：123hexo new page tagshexo new page categorieshexo new page about 在目录blog/source下面就会多了tags、categories、about的文件夹tags目录下的index.md12345---title: tagsdate: 2017-11-30 23:42:37tags: &quot;tags&quot;--- categories目录下的index.md12345---title: categoriesdate: 2017-11-30 23:42:37type: &quot;categories&quot;--- about目录下的index.md12345678910111213141516---title: aboutdate: 2017-11-30 23:42:37type: &quot;about&quot;------title: aboutdate: 2017-11-28 18:23:24---## Hello 大家好### 这里是一只前端菜鸟，欢迎大家讨论交流学习- #### From cycle_Ho- #### Contact me：&gt; - ###### QQ：494451589&gt; - ###### Email：494451589@qq.com 这就增加了tags、categories、about的页面以后写文章则在开头： 123456---title: yourTitledate: 2017-12-1 14:12:36tags: [tags1,tags2]categories: 分类--- 增加站内搜索安装hexo-generator-searchdb1npm install hexo-generator-searchdb --save 在blog/_config.yml添加search字段12345search: path: search.xml field: post format: html limit: 10000 在blog/themes/next/_config.yml找到并修改enable： true12local_search: enable: false 刷新浏览器完成了 修改首页文章不展示全部在blog/themes/next/_config.yml文件找auto_excerpt到并修改为：123auto_excerpt: enable: true length: 150 //我觉得是展示长度 修改Sidebar头像在blog/themes/next/_config.yml文件找到Sidebar Avatar：1234# Sidebar Avatar#in theme directory(source/images): /images/avatar.gif#in site directory(source/uploads): /uploads/avatar.gif#avatar: /images/avatar.gif 并修改为：1234# Sidebar Avatarin theme directory(source/images): /images/avatar.gifin site directory(source/uploads): /uploads/avatar.gifavatar: /images/avatar.gif 在blog/themes/next/source/images目录下替换avatar.gif即可增加社交途径在blog/themes/next/_config.yml文件找到：把前面井号#去掉即为增加（主要大小写） 12345678910111213141516171819social: Github: https://github.com/cycleho || github Weibo: https://weibo.com/u/1825215421?referflag=1001030102 || weibo #E-Mail: mailto:yourname@gmail.com || envelope #Google: https://plus.google.com/yourname || google #Twitter: https://twitter.com/yourname || twitter #FB Page: https://www.facebook.com/yourname || facebook #VK Group: https://vk.com/yourname || vk #StackOverflow: https://stackoverflow.com/yourname || stack-overflow #YouTube: https://youtube.com/yourname || youtube #Instagram: https://instagram.com/yourname || instagram #Skype: skype:yourname?call|chat || skypesocial_icons: enable: true icons_only: true//是否只显示图标 transition: false Github: github Weibo: weibo 最后其实想增加更多功能要了解主配置文件（blog/_config.yml）和主题配置文件（blog/themes/next/_config.yml）。 参考：http://theme-next.iissnan.com/]]></content>
      <categories>
        <category>搭建博客</category>
      </categories>
      <tags>
        <tag>github</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[基于hexo和github搭建个人博客（一）]]></title>
    <url>%2Fblog%2F2017%2F11%2F28%2F%E5%9F%BA%E4%BA%8Ehexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%B8%80%EF%BC%89%2F</url>
    <content type="text"><![CDATA[基于hexo和github搭建个人博客搭建Github注册github账号在自己的github上创建仓库 (new repository) 安装Git由于安装Git比较简单这里不细说了，请自行百度，当输入命令后输出版本信息即为安装成功了12# git --versiongit version 1.8.3.1 安装nodejs请查看上篇文章 安装Hexo以上所有都安装完成之后再安装Hexo：1sudo npm install hexo-cli -g 编写发布创建博客将下面的 blogname替换成你自己的blogname，执行成功后，会创建出一个名为 blogname 的文件夹。1hexo init blogname 更改配置主题安装（这里安装挺热门的next主题），也有更多主题。12cd username.github.iogit clone https://github.com/iissnan/hexo-theme-next themes/next 主配置（blogname/_config.yml）注意：每个冒号：后面都要加一个空格1234567title: cycle_ho //你博客的名字 author: cycle_ho //你的名字 language: zh-Hans //语言 中文 theme: next //刚刚安装的主题名称 deploy: type: git //使用Git 发布 repo: https://github.com/username/username.git // 刚创建的Github仓库 写文章,注意：每个冒号：后面都要加一个空格使用的是markdown格式（自己百度）。但是头部应该这样写： 123456--- title: First blog date： 2017-11-30 23:30:07 tags： [tags1,tags2]//标签，需要安装，下面会讲到 categories: //分类，需要安装，下面也会讲到 --- 安装hexo-deployer-git自动部署发布工具1npm install hexo-deployer-git --save 发布测试没问题后，我们就生成静态网页文件发布至我们的Github pages 中。 123hexo clean //清除页面（一定要先清除）hexo g //生成页面hexo d //发布 当然也可以1hexo clean &amp;&amp; hexo g &amp;&amp; hexo g 然后按提示输入Github账号的信息就可以了，这样你就完成了你的个人博客了你可以输入：http://cycleho.github.io/blog[/](http://cycleho.github.io/blog/)就可以访问了 最后对于初学者，可以写markdown的方式有很多： [x] CSDN网页在线， [x] markdownPad软件， [x] 有道云笔记如果发现其他更好用的可以推荐给我哦。参考：http://www.jianshu.com/p/4eaddcbe4d12]]></content>
      <categories>
        <category>搭建博客</category>
      </categories>
      <tags>
        <tag>github</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[阿里云CentOs 7安装node]]></title>
    <url>%2Fblog%2F2017%2F11%2F28%2F%E9%98%BF%E9%87%8C%E4%BA%91CentOs%207%E5%AE%89%E8%A3%85nodejs%2F</url>
    <content type="text"><![CDATA[阿里云CentOs 7安装nginx使用XShell连接到目标服务器后把yum更新到最新版本：1yum -y update 将使用最新源代码构建Node.js，要进行软件的安装，需要一组用来编译源代码的开发工具：1yum -y groupinstall &quot;Development Tools&quot; 安装node.js开始安装Node.js，先进入/usr/src文件夹，从Node.js的站点中获取压缩档源代码, 我选择的版本为v6.11.3：12cd /usr/local/srcwget http://nodejs.org/dist/v0.10.18/node-v6..11.3.tar.gz 解压缩源文件，并且进入到压缩后的文件夹中:12tar zxf node-v6..11.3.tar.gz cd node-v6..11.3 执行配置脚本来进行编译预处理:1./configure 开始编译源代码:1make&amp;&amp;make install 测试是否安装成功12node -vnpm -v //npm是模块管理器 若每条命令后面输出版本号即安装成功 最后0.xxx版本是Joyent公司维护.进展缓慢.但是稳定.4.,5.*版本都是由网友维护的.相对的进展快,增加和许多新功能.偶数开头的是稳定版,奇数开头的开发版就是会不断变化更新.为下一个稳定版本做测试差不多的意思.不过现在都是在nodejs基金会下面.所以咱们在nodejs网站可以看到更新的时候会有很多版本更新.说到区别得看一下nodejs的发展历史.]]></content>
      <categories>
        <category>搭建服务器</category>
      </categories>
      <tags>
        <tag>node</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[阿里云CentOs 7安装nginx]]></title>
    <url>%2Fblog%2F2017%2F11%2F28%2F%E9%98%BF%E9%87%8C%E4%BA%91CentOs%207%E5%AE%89%E8%A3%85nginx%2F</url>
    <content type="text"><![CDATA[阿里云CentOs 7下安装nginx安装所需环境Nginx 是 C语言 开发，建议在 Linux 上运行，当然，也可以安装 Windows 版本，本篇则使用 CentOS 7 作为安装环境。 gcc 安装安装 nginx 需要先将官网下载的源码进行编译，编译依赖 gcc 环境，如果没有 gcc 环境，则需要安装： 1yum install gcc-c++ PCRE pcre-devel 安装PCRE(Perl Compatible Regular Expressions) 是一个Perl库，包括 perl 兼容的正则表达式库。nginx 的 http 模块使用 pcre 来解析正则表达式，所以需要在 linux 上安装 pcre 库，pcre-devel 是使用 pcre 开发的一个二次开发库。nginx也需要此库。命令： 1yum install -y pcre pcre-devel zlib 安装zlib 库提供了很多种压缩和解压缩的方式， nginx 使用 zlib 对 http 包的内容进行 gzip ，所以需要在 Centos 上安装 zlib 库。 1yum install -y zlib zlib-devel OpenSSL 安装OpenSSL 是一个强大的安全套接字层密码库，囊括主要的密码算法、常用的密钥和证书封装管理功能及 SSL 协议，并提供丰富的应用程序供测试或其它目的使用。nginx 不仅支持 http 协议，还支持 https（即在ssl协议上传输http），所以需要在 Centos 安装 OpenSSL 库。 1yum install -y openssl openssl-devel 执行以上命令后出现 ==nothing to do== 即为已经安装过 安装与配置使用wget命令下载到/usr/local/src12cd /usr/local/srcwget -c https://nginx.org/download/nginx-1.10.1.tar.gz 解压12tar -zxvf nginx-1.10.1.tar.gzcd nginx-1.10.1 配置使用默认配置装到/usr/local/nginx1./configure 自定义配置（不推荐）12345678910111213./configure \--prefix=/usr/local/nginx \--conf-path=/usr/local/nginx/conf/nginx.conf \--pid-path=/usr/local/nginx/conf/nginx.pid \--lock-path=/var/lock/nginx.lock \--error-log-path=/var/log/nginx/error.log \--http-log-path=/var/log/nginx/access.log \--with-http_gzip_static_module \--http-client-body-temp-path=/var/temp/nginx/client \--http-proxy-temp-path=/var/temp/nginx/proxy \--http-fastcgi-temp-path=/var/temp/nginx/fastcgi \--http-uwsgi-temp-path=/var/temp/nginx/uwsgi \--http-scgi-temp-path=/var/temp/nginx/scgi 编译安装1make&amp;&amp;make install 启动、停止nginx12345cd /usr/local/nginx/sbin./nginx //启动nginx./nginx -s stop //此方式停止步骤是待nginx进程处理任务完毕进行停止。./nginx -s quit //此方式相当于先查出nginx进程id再使用kill命令强制杀掉进程。./nginx -s reload //重启nginx 查询nginx进程 1ps aux|grep nginx 重启nginx先停止再启动（推荐）：对 nginx 进行重启相当于先停止再启动，即先执行停止命令再执行启动命令。如下： 12./nginx -s quit./nginx 重新加载配置文件：当 ngin x的配置文件 nginx.conf 修改后，要想让配置生效需要重启 nginx，使用-s reload不用先停止 ngin x再启动 nginx 即可将配置信息在 nginx 中生效，如下：1./nginx -s reload 开机自启动在rc.local增加启动代码即可 1vi /etc/rc.local 在最后增加/usr/local/nginx/sbin/nginx 设置执行权限：1chmod 755 rc.local 配置文件打开/usr/local/nginx/conf 12cd /usr/local/nginx/confvi ./nginx.conf 把server_name改为自己的公网ip或域名，端口号默认为80。root设置为根目录，index根文件。 阿里云开放端口（作为小菜鸟这里卡主我两天）登录到阿里云官网。点击控制台，选择自己服务器。点击安全组–&gt;配置规则–&gt;添加安全组规则，然后就开放刚刚在nginx.conf设置的端口号 在浏览器访问你的域名，当你看到下面的图就成功安装nginx了]]></content>
      <categories>
        <category>搭建服务器</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2Fblog%2F2017%2F11%2F27%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
